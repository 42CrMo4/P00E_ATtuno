name: KiCad 3D Model Checker

on:
  push:
    paths:
      - '**.kicad_pcb'
      - '**.kicad_sch'
  pull_request:
    paths:
      - '**.kicad_pcb'
      - '**.kicad_sch'

jobs:
  check-3d-models:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Check 3D models
        run: |
          python3 - <<EOF
          import os
          import sys
          import re
          
          def find_kicad_files(directory):
              """Find all KiCad PCB files in the directory."""
              found_files = []
              for root, _, files in os.walk(directory):
                  for file in files:
                      if file.endswith('.kicad_pcb'):
                          found_files.append(os.path.join(root, file))
              print(f"\n[DEBUG] Found KiCad PCB files: {found_files}")
              return found_files
          
          def extract_3d_models(pcb_file):
              """Extract 3D model paths from KiCad PCB file."""
              models = []
              print(f"\n[DEBUG] Reading PCB file: {pcb_file}")
              try:
                  with open(pcb_file, 'r', encoding='utf-8') as f:
                      content = f.read()
                      print(f"[DEBUG] File size: {len(content)} bytes")
                      
                      # Print a sample of the content for debugging
                      print("[DEBUG] First 200 characters of file:")
                      print(content[:200])
                      
                      # Look for 3D model paths in the format: (model "${KIPRJMOD}/3d-models/...)
                      pattern = r'\(model "\${KIPRJMOD}\/3d-models\/([^"]+)"'
                      matches = re.finditer(pattern, content)
                      
                      # Count all model entries for debugging
                      all_models_pattern = r'\(model "[^"]+"'
                      all_models = re.findall(all_models_pattern, content)
                      print(f"[DEBUG] Total model entries found: {len(all_models)}")
                      print("[DEBUG] All model paths found:")
                      for model in all_models:
                          print(f"  {model}")
                      
                      for match in matches:
                          model_path = match.group(1)
                          models.append(model_path)
                          print(f"[DEBUG] Found model path: {model_path}")
              except Exception as e:
                  print(f"[ERROR] Failed to process file {pcb_file}: {str(e)}")
                  raise
              
              print(f"[DEBUG] Number of matching 3D models found: {len(models)}")
              return models
          
          def check_3d_models_exist(models, project_dir):
              """Check if 3D models exist in the 3d-models directory."""
              models_dir = os.path.join(project_dir, '3d-models')
              print(f"\n[DEBUG] Checking models in directory: {models_dir}")
              print(f"[DEBUG] Directory exists: {os.path.exists(models_dir)}")
              
              if os.path.exists(models_dir):
                  print("[DEBUG] Contents of 3d-models directory:")
                  for root, dirs, files in os.walk(models_dir):
                      for item in dirs:
                          print(f"  DIR: {item}")
                      for item in files:
                          print(f"  FILE: {item}")
              
              missing_models = []
              for model in models:
                  model_path = os.path.join(project_dir, '3d-models', model)
                  print(f"[DEBUG] Checking model path: {model_path}")
                  if not os.path.exists(model_path):
                      print(f"[DEBUG] Missing model: {model_path}")
                      missing_models.append(model)
                  else:
                      print(f"[DEBUG] Found model: {model_path}")
              return missing_models
          
          # Main execution
          print("\n=== KiCad 3D Model Checker ===")
          project_dir = os.getcwd()
          print(f"[DEBUG] Project directory: {project_dir}")
          print("[DEBUG] Directory contents:")
          for item in os.listdir(project_dir):
              print(f"  {item}")
          
          all_missing_models = []
          pcb_files = find_kicad_files(project_dir)
          
          if not pcb_files:
              print("[ERROR] No KiCad PCB files found!")
              sys.exit(1)
          
          for pcb_file in pcb_files:
              print(f"\n[INFO] Checking PCB file: {pcb_file}")
              models = extract_3d_models(pcb_file)
              missing = check_3d_models_exist(models, project_dir)
              all_missing_models.extend(missing)
          
          if all_missing_models:
              print("\n[ERROR] Missing 3D models:")
              for model in sorted(set(all_missing_models)):
                  print(f"  - {model}")
              sys.exit(1)
          else:
              print("\n[SUCCESS] All 3D models are present!")
              sys.exit(0)
          EOF