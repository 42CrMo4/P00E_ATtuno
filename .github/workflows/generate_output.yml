name: CI output design

# ToDos:
# - artifact upload ERC/DRC

# Controls when the action will run. Triggers the workflow on push or pull request
# events that happen on all branches
on:
  push:
    # branches: [ main ]
    paths:
      - '*.kicad_sch'
      - '*.kicad_pcb'
      - '*.kiplot.yaml'
      - '.github/workflows/generate_output.yml'
      - 'project.properties'

  pull_request:
    # branches: [ main ]
    paths:
      - '*.kicad_sch'
      - '*.kicad_pcb'
      - '*.kiplot.yaml'
      - '.github/workflows/generate_output.yml'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  ERC-DRC:
    runs-on: ubuntu-latest
    container: ghcr.io/inti-cmnb/kicad6_auto:1.8.2

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'

    - name: Run ERC & DRC
      run: |
        [ -f *.kicad_sch ] && kiplot  -d Fabrication_temp -s update_xml,run_drc -i
        [ -f *.kicad_pcb ] && kiplot  -d Fabrication_temp -s update_xml,run_erc -i
    #- name: Retrieve results
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: ERC-DRC_Output
    #    path: 'Fabrication_temp'

  # DRC:
  #   runs-on: ubuntu-latest
  #   container: setsoft/kicad_auto:dev_k6
  #   needs: ERC

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Run DRC
  #     run: |
  #       [ -f *.kicad_pcb ] && kiplot  -d Fabrication_temp -s update_xml,run_erc -i
    #- name: Retrieve results
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: ERC-DRC_Output
    #    path: 'Fabrication_temp'

  Fabrication:
    name: Fabrication files
    runs-on: ubuntu-latest
    container: ghcr.io/inti-cmnb/kicad6_auto:1.8.2
    # needs: ERC

    steps:
    #- name: Update system repositories, Install Required Libraries
    #  run: |
    #    apt update
    #    apt -y install git
    
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: '0'

    - name: Assign variables from project.properties to Env variable
      run: |
        cat project.properties | egrep -v "^\s*(#|$)" >> $GITHUB_ENV 
        echo COMMIT=$(git rev-parse --short HEAD) >> $GITHUB_ENV 
      # https://kvz.io/cat-a-file-without-the-comments.html
    
    - name: Update the Schematic with the git hash
      run: |
        sed -i "s!<<hash>>!Git-${{ env.COMMIT }}!" *.kicad_sch
        sed -i "s!<<project_name>>!${{ env.project_name }}!" *.kicad_sch
        sed -i "s!<<date>>!$(date +'%Y-%m-%d')!" *.kicad_sch 
        sed -i "s!<<ID>>!${{ env.ID_prefix }}${{ env.ID }}!" *.kicad_sch

    #- name: Run Schematic and BOM 
    #  run: |
    #    [ -f *.kicad_sch ] && kiplot  -d Fabrication_temp -s all 
    
    - name: Update the PCBs with the git hash
      run: |
        sed -i "s!<<hash>>!Git-${{ env.COMMIT }}!" *.kicad_pcb
        sed -i "s!<<project_name>>!${{ env.project_name }}!" *.kicad_pcb
        sed -i "s!<<date>>!$(date +'%Y-%m-%d')!" *.kicad_pcb 
        sed -i "s!<<website_link>>!${{ env.Website_link }}/${{ env.ID_prefix }}/${{ env.ID }}!" *.kicad_pcb 
        sed -i "s!<<ID>>!ID:${{ env.ID_prefix }}${{ env.ID }}!" *.kicad_pcb 

    - name: Parse variants from YAML
      id: variants
      uses: mikefarah/yq@v4
      with:
        cmd: yq e '.variants[].name' *.kiplot.yaml

    - name: Run PCB stuff for all variants
      run: |
        if [ -f *.kicad_pcb ]; then
          for variant in $(echo "${{ steps.variants.outputs.result }}" | tr '\n' ' '); do
            kiplot -d "Fabrication_temp/${variant}" -s all -g "variant=${variant}" 3dview
          done
        fi

    - name: Rename the Schematic and PCB Raw Files
      run: |
        mv *.kicad_sch ${{ env.ID_prefix }}${{ env.ID }}_${{ env.project_name }}_${{ env.COMMIT }}.kicad_sch
        mv *.kicad_pcb ${{ env.ID_prefix }}${{ env.ID }}_${{ env.project_name }}_${{ env.COMMIT }}.kicad_pcb

    - name: Retrieve results kicad_pcb with the git hash
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ID_prefix }}${{ env.ID }}_${{ env.project_name }}_${{ env.COMMIT }}_Kicad_raw
        path: '${{ env.ID_prefix }}${{ env.ID }}_${{ env.project_name }}_${{ env.COMMIT }}.kicad_*'

    - name: Renaming Files
      run: |
        cd Fabrication_temp
        #for file in *; do mv -v ${file} ${{ env.ID_prefix }}${{ env.ID }}_${{ env.project_name }}_${{ env.COMMIT }}_${file}; done #https://unix.stackexchange.com/a/389516
        for file in $(find . -type f); do
          mv -v "${file}" "$(dirname "${file}")/${{ env.ID_prefix }}${{ env.ID }}_${{ env.project_name }}_${{ env.COMMIT }}_$(basename "${file}")"
        done
        # mkdir PCB_Sheet
        # mv *Sheet.* PCB_Sheet/
        #mkdir BoM
        #mv *iBoM.* BoM/

    - name: Retrieve results
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ID_prefix }}${{ env.ID }}_${{ env.project_name }}_${{ env.COMMIT }}_Output
        path: 'Fabrication_temp'

    - name: Run STEP
      run: |
        [ -f *.kicad_pcb ] && kiplot  -d Fabrication_temp_step -s all step
        cd Fabrication_temp_step
        mv *.step ${{ env.ID_prefix }}${{ env.ID }}_${{ env.project_name }}_${{ env.COMMIT }}.step

    - name: Retrieve results
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ID_prefix }}${{ env.ID }}_${{ env.project_name }}_${{ env.COMMIT }}_Output_STEP
        path: 'Fabrication_temp_step'
